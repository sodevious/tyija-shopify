"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _operators = require("rxjs/operators");

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _components = require("@sanity/base/components");

var _versionedClient = require("../../versionedClient");

var _DashboardTool = require("../../DashboardTool");

var _legacyParts = require("../../legacyParts");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var AvatarWrapper = (0, _styledComponents.default)(_ui.Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  box-sizing: border-box;\n  border-radius: 50%;\n  border-color: transparent;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n\n  & > img {\n    width: 100%;\n    height: auto;\n  }\n"])));

function getInviteUrl(projectId) {
  return "https://manage.sanity.io/projects/".concat(projectId, "/team/invite");
}

function sortUsersByRobotStatus(userA, userB, project) {
  var members = project.members;
  var membershipA = members.find(member => member.id === userA.id);
  var membershipB = members.find(member => member.id === userB.id);

  if (membershipA.isRobot) {
    return 1;
  }

  if (membershipB.isRobot) {
    return -1;
  }

  return 0;
}

class ProjectUsers extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      project: null,
      users: null,
      error: null
    });

    _defineProperty(this, "handleRetryFetch", () => {
      this.fetchData();
    });
  }

  componentDidMount() {
    this.fetchData();
  }

  componentWillUnmount() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }

  fetchData() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }

    var _versionedClient$conf = _versionedClient.versionedClient.config(),
        projectId = _versionedClient$conf.projectId;

    this.subscription = _versionedClient.versionedClient.observable.request({
      uri: "/projects/".concat(projectId)
    }).pipe((0, _operators.switchMap)(project => _legacyParts.userStore.observable.getUsers(project.members.map(mem => mem.id)).pipe((0, _operators.map)(users => ({
      project,
      users
    }))))).subscribe({
      next: _ref => {
        var users = _ref.users,
            project = _ref.project;
        return this.setState({
          project,
          users: (Array.isArray(users) ? users : [users]).sort((userA, userB) => sortUsersByRobotStatus(userA, userB, project))
        });
      },
      error: _error => this.setState({
        error: _error
      })
    });
  }

  render() {
    var _this$state = this.state,
        error = _this$state.error,
        project = _this$state.project,
        users = _this$state.users;
    var isLoading = !users || !project;

    if (error) {
      return /*#__PURE__*/_react.default.createElement(_DashboardTool.DashboardWidget, {
        header: "Project users"
      }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
        padding: 4
      }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Something went wrong while fetching data. You could", ' ', /*#__PURE__*/_react.default.createElement("a", {
        onClick: this.handleRetryFetch,
        title: "Retry users fetch",
        style: {
          cursor: 'pointer'
        }
      }, "retry"), "..?")));
    }

    return /*#__PURE__*/_react.default.createElement(_DashboardTool.DashboardWidget, {
      header: "Project users",
      footer: /*#__PURE__*/_react.default.createElement(_ui.Button, {
        style: {
          width: '100%'
        },
        paddingX: 2,
        paddingY: 4,
        mode: "bleed",
        tone: "primary",
        text: "Invite members",
        as: "a",
        loading: isLoading,
        href: isLoading ? undefined : getInviteUrl(project.id)
      })
    }, isLoading && /*#__PURE__*/_react.default.createElement(_ui.Box, {
      paddingY: 5,
      paddingX: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 4
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center",
      muted: true,
      size: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.Spinner, null)), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center",
      size: 1,
      muted: true
    }, "Loading items..."))), !isLoading && /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 3,
      padding: 3
    }, users.map(user => {
      var membership = project.members.find(member => member.id === user.id);
      var media = membership.isRobot ? /*#__PURE__*/_react.default.createElement(_ui.Text, {
        size: 3
      }, /*#__PURE__*/_react.default.createElement(_icons.RobotIcon, null)) : /*#__PURE__*/_react.default.createElement(AvatarWrapper, {
        tone: "transparent"
      }, (user === null || user === void 0 ? void 0 : user.imageUrl) && /*#__PURE__*/_react.default.createElement("img", {
        src: user.imageUrl,
        alt: user === null || user === void 0 ? void 0 : user.displayName
      }));
      return /*#__PURE__*/_react.default.createElement(_ui.Box, {
        key: user.id
      }, /*#__PURE__*/_react.default.createElement(_components.DefaultPreview, {
        title: user.displayName,
        subtitle: membership.role,
        media: media
      }));
    })));
  }

}

_defineProperty(ProjectUsers, "propTypes", {});

_defineProperty(ProjectUsers, "defaultProps", {});

var _default = ProjectUsers;
exports.default = _default;