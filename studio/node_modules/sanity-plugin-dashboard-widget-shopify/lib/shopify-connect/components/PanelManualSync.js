"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _pluralize = _interopRequireDefault(require("pluralize"));

var _intervalToDuration = _interopRequireDefault(require("date-fns/intervalToDuration"));

var _react = _interopRequireDefault(require("react"));

var _reactTimeAgo = _interopRequireDefault(require("react-time-ago"));

var _color = require("@sanity/color");

var TIME_OFFSET = 2500; // ms

var StatusTooltip = function StatusTooltip(props) {
  var _status$count$product, _status$count, _status$count$variant, _status$count2;

  var status = props.status; // Return early if empty / undefined

  if (!status || Object.keys(status).length === 0) {
    return null;
  }

  var duration = (0, _intervalToDuration["default"])({
    start: new Date(status === null || status === void 0 ? void 0 : status.startedAt),
    end: new Date(status === null || status === void 0 ? void 0 : status.completedAt)
  });
  var formattedDuration = [];

  if (duration.seconds) {
    formattedDuration.unshift("".concat(duration.seconds, "s"));
  }

  if (duration.minutes) {
    formattedDuration.unshift("".concat(duration.minutes, "m"));
  }

  if (duration.hours) {
    formattedDuration.unshift("".concat(duration.hours, "s"));
  }

  var productsPlural = (0, _pluralize["default"])('product', (_status$count$product = status === null || status === void 0 ? void 0 : (_status$count = status.count) === null || _status$count === void 0 ? void 0 : _status$count.products) !== null && _status$count$product !== void 0 ? _status$count$product : 0, true);
  var variantsPlural = (0, _pluralize["default"])('variant', (_status$count$variant = status === null || status === void 0 ? void 0 : (_status$count2 = status.count) === null || _status$count2 === void 0 ? void 0 : _status$count2.variants) !== null && _status$count$variant !== void 0 ? _status$count$variant : 0, true);
  return /*#__PURE__*/_react["default"].createElement(_ui.Tooltip, {
    content: /*#__PURE__*/_react["default"].createElement(_ui.Box, {
      padding: 2
    }, /*#__PURE__*/_react["default"].createElement(_ui.Stack, {
      space: 2
    }, status !== null && status !== void 0 && status.error ? /*#__PURE__*/_react["default"].createElement(_ui.Text, {
      size: 1,
      weight: "medium"
    }, (status === null || status === void 0 ? void 0 : status.error) && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, "Failed with error: ", status.error)) : /*#__PURE__*/_react["default"].createElement(_ui.Text, {
      size: 1,
      weight: "medium"
    }, "Updated ", productsPlural, " and ", variantsPlural, " in", ' ', formattedDuration.join(' ')), /*#__PURE__*/_react["default"].createElement(_ui.Text, {
      muted: true,
      size: 1
    }, "Manually synced products will not appear in the updated products list."))),
    placement: "top",
    portal: true
  }, /*#__PURE__*/_react["default"].createElement(_icons.InfoOutlineIcon, {
    style: {
      marginLeft: '0.1em'
    }
  }));
};

var PanelManualSync = function PanelManualSync(props) {
  var status = props.status;
  var isNeverRun = !status || Object.keys(status).length === 0;
  var isCreated = (status === null || status === void 0 ? void 0 : status.status) === 'created';
  var isFailed = (status === null || status === void 0 ? void 0 : status.status) === 'failed';
  var isSuccess = (status === null || status === void 0 ? void 0 : status.status) === 'success';
  return /*#__PURE__*/_react["default"].createElement(_ui.Box, null, /*#__PURE__*/_react["default"].createElement(_ui.Inline, {
    space: 2
  }, /*#__PURE__*/_react["default"].createElement(_ui.Text, {
    muted: true,
    size: 1,
    style: {
      color: isFailed ? _color.hues.red[500].hex : _color.hues.gray[600].hex
    }
  }, "Last manual sync: ", isCreated && (status === null || status === void 0 ? void 0 : status.startedAt) && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, "started", ' ', /*#__PURE__*/_react["default"].createElement(_reactTimeAgo["default"], {
    date: new Date(status.startedAt).getTime() - TIME_OFFSET,
    timeStyle: "round"
  })), isSuccess && (status === null || status === void 0 ? void 0 : status.completedAt) && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, "completed", ' ', /*#__PURE__*/_react["default"].createElement(_reactTimeAgo["default"], {
    date: new Date(status.completedAt).getTime() - TIME_OFFSET,
    timeStyle: "round"
  }), /*#__PURE__*/_react["default"].createElement(StatusTooltip, {
    status: status
  })), isFailed && (status === null || status === void 0 ? void 0 : status.completedAt) && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, "failed", ' ', /*#__PURE__*/_react["default"].createElement(_reactTimeAgo["default"], {
    date: new Date(status.completedAt).getTime() - TIME_OFFSET,
    timeStyle: "round"
  }), /*#__PURE__*/_react["default"].createElement(StatusTooltip, {
    status: status
  })), isNeverRun && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, "never"))));
};

var _default = PanelManualSync;
exports["default"] = _default;